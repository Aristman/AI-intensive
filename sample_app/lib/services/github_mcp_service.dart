import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:http/http.dart' as http;
import 'package:flutter/services.dart' show rootBundle;

/// –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Github MCP
class GithubMcpService {
  static const String _githubApiBaseUrl = 'https://api.github.com';
  static const String _envAssetPath = 'assets/.env';

  /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç GITHUB_MCP_TOKEN –∏–∑ assets/.env
  Future<String?> _loadTokenFromAssets() async {
    try {
      final content = await rootBundle.loadString(_envAssetPath);
      // –ü–∞—Ä—Å–∏–º .env: —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞ KEY=VALUE, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      final lines = const LineSplitter().convert(content);
      for (final raw in lines) {
        final line = raw.trim();
        if (line.isEmpty || line.startsWith('#')) continue;
        final eq = line.indexOf('=');
        if (eq <= 0) continue;
        final key = line.substring(0, eq).trim();
        var value = line.substring(eq + 1).trim();
        // –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if ((value.startsWith('"') && value.endsWith('"')) || (value.startsWith("'") && value.endsWith("'"))) {
          value = value.substring(1, value.length - 1);
        }
        if (key == 'GITHUB_MCP_TOKEN') {
          return value;
        }
      }
      return null;
    } catch (e) {
      debugPrint('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å assets/.env: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  Future<Map<String, dynamic>> getRepositoryInfo(String owner, String repo, String token) async {
    try {
      final response = await http.get(
        Uri.parse('$_githubApiBaseUrl/repos/$owner/$repo'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
        },
      );

      if (response.statusCode == 200) {
        return jsonDecode(response.body);
      } else {
        throw Exception('Failed to fetch repository info: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching repository info: $e');
    }
  }

  /// –ü–æ–∏—Å–∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
  Future<List<Map<String, dynamic>>> searchRepositories(String query, String token) async {
    try {
      final response = await http.get(
        Uri.parse('$_githubApiBaseUrl/search/repositories?q=$query'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return List<Map<String, dynamic>>.from(data['items'] ?? []);
      } else {
        throw Exception('Failed to search repositories: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error searching repositories: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
  Future<String> getFileContent(String owner, String repo, String path, String token) async {
    try {
      final response = await http.get(
        Uri.parse('$_githubApiBaseUrl/repos/$owner/$repo/contents/$path'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
        },
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        if (data['content'] != null) {
          return utf8.decode(base64.decode(data['content']));
        }
        return '';
      } else {
        throw Exception('Failed to fetch file content: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching file content: $e');
    }
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤
  Future<List<Map<String, dynamic>>> getCommits(String owner, String repo, String token) async {
    try {
      final response = await http.get(
        Uri.parse('$_githubApiBaseUrl/repos/$owner/$repo/commits'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
        },
      );

      if (response.statusCode == 200) {
        return List<Map<String, dynamic>>.from(jsonDecode(response.body));
      } else {
        throw Exception('Failed to fetch commits: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error fetching commits: $e');
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ issue –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
  Future<Map<String, dynamic>> createIssue(
    String owner,
    String repo,
    String title,
    String body,
    String token,
  ) async {
    try {
      final response = await http.post(
        Uri.parse('$_githubApiBaseUrl/repos/$owner/$repo/issues'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'title': title,
          if (body.isNotEmpty) 'body': body,
        }),
      );

      if (response.statusCode == 201) {
        return jsonDecode(response.body) as Map<String, dynamic>;
      } else {
        throw Exception('Failed to create issue: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      throw Exception('Error creating issue: $e');
    }
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ issue —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
  Future<Map<String, dynamic>> createIssueFromEnv(
    String owner,
    String repo,
    String title,
    String body,
  ) async {
    final token = await _loadTokenFromAssets();
    if (token == null || token.isEmpty) {
      throw Exception('GITHUB_MCP_TOKEN not found in assets/.env');
    }
    return createIssue(owner, repo, title, body, token);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  Future<bool> validateToken(String token) async {
    try {
      final response = await http.get(
        Uri.parse('$_githubApiBaseUrl/user'),
        headers: {
          'Authorization': 'token $token',
          'Accept': 'application/vnd.github.v3+json',
        },
      );

      return response.statusCode == 200;
    } catch (e) {
      return false;
    }
  }

  /// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∞
  Future<bool> validateTokenFromEnv() async {
    final token = await _loadTokenFromAssets();
    if (token == null || token.isEmpty) return false;
    return await validateToken(token);
  }

  /// –ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MCP
  Future<String> analyzeRepository(String owner, String repo, String token) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
      final repoInfo = await getRepositoryInfo(owner, repo, token);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–º–º–∏—Ç—ã
      final commits = await getCommits(owner, repo, token);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
      final analysis = '''
–ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è $owner/$repo:

üìä –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –ù–∞–∑–≤–∞–Ω–∏–µ: ${repoInfo['name']}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${repoInfo['description'] ?? '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}
- –Ø–∑—ã–∫: ${repoInfo['language'] ?? '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}
- –ó–≤–µ–∑–¥—ã: ${repoInfo['stargazers_count']}
- –§–æ—Ä–∫–∏: ${repoInfo['forks_count']}
- –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${repoInfo['watchers_count']}

üìù –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
- –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${commits.isNotEmpty ? commits[0]['commit']['message'] : '–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤'}
- –í—Å–µ–≥–æ –∫–æ–º–º–∏—Ç–æ–≤: ${commits.length}

üîó –°—Å—ã–ª–∫–∞: ${repoInfo['html_url']}
      ''';

      return analysis;
    } catch (e) {
      return '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: $e';
    }
  }
}